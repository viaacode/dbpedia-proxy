<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:email="http://www.mulesoft.org/schema/mule/email" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="9001" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="lookup.dbpedia.org" port="80" basePath="/" doc:name="HTTP Request Configuration">
        <http:proxy host="proxy.do.viaa.be" port="80"/>
    </http:request-config>
    <http:request-config name="SpotlightNl" host="localhost" port="2226" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000"/>
        <http:request-config name="SpotlightFr" host="localhost" port="2227" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000"/>
    <http:request-config name="geonamesAPI" host="api.geonames.org" basePath="/" responseTimeout="30000" doc:name="HTTP Request Configuration" port="80">
        <http:proxy host="proxy.do.viaa.be" port="80"/>
    </http:request-config>
    
    <flow name="dbpedia-proxyFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/lookup" allowedMethods="GET" doc:name="/lookup service"/>
        <logger level="INFO" doc:name="Logger"/>
        <set-variable variableName="queryClass" value="#[message.inboundProperties.'http.query.params'.QueryClass.toString()]" doc:name="Set queryClass"/>
        <set-variable variableName="queryString" value="#[message.inboundProperties.'http.query.params'.QueryString.toString()]" doc:name="Set queryString"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/api/search/KeywordSearch" method="GET" doc:name="Get dbpedia info with JSON accept header">
            <http:request-builder>
                <http:query-param paramName="QueryClass" value="#[flowVars.queryClass]"/>
                <http:query-param paramName="QueryString" value="#[flowVars.queryString]"/>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer mimeType="application/json" doc:name="Byte Array to String"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="#[exception.exceptions]" level="ERROR" doc:name="Copy_of_Logger"/>
            <foreach collection="#[exception.exceptions]" doc:name="Copy_of_For Each">
                <logger message="causedExactlyBy : #[payload.causedExactlyBy(org.mule.api.routing.filter.FilterUnacceptedException)]" level="INFO" doc:name="Copy_of_Logger"/>
                <logger message="Detailed Message : #[payload.getDetailedMessage()]" level="INFO" doc:name="Copy_of_Logger"/>
                <logger message="Exception Code : #[payload.getExceptionCode()]" level="INFO" doc:name="Copy_of_Logger"/>
                <logger message="Message Code : #[payload.getMessageCode()]" level="INFO" doc:name="Copy_of_Logger"/>
                <logger message="Summary Message : #[payload.getSummaryMessage()]" level="INFO" doc:name="Copy_of_Logger"/>
                <logger message="Verbose Message : #[payload.getVerboseMessage()]" level="INFO" doc:name="Copy_of_Logger"/>
            </foreach>
        </catch-exception-strategy>
    </flow>
    <flow name="dbpedia-proxyFlow2">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/spotlight" allowedMethods="GET" doc:name="/spotlight service"/>
        <logger level="INFO" doc:name="Logger"/>
        <set-variable variableName="is_vlaams" value="#[false]" doc:name="Set is_vlaams"/>
        <set-variable variableName="queryString" value="#[message.inboundProperties.'http.query.params'.QueryString.toString().toLowerCase()]" doc:name="Set queryString (to lowercase also)"/>
        <set-payload value="#['text=&quot;' + flowVars.queryString + '&quot;&amp;confidence=0.0']" doc:name="Set Payload"/>
        <http:request config-ref="SpotlightNl" path="/nl/rest/annotate" method="POST" doc:name="Get dbpedia info with JSON accept header and text body">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <set-variable variableName="output" value="#[payload]" doc:name="Set output"/>
        <json:json-to-object-transformer doc:name="JSON to Object"/>
        <logger level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload.hasNode(&quot;Resources&quot;)]">
                <expression-component doc:name="Expression"><![CDATA[// do nothing]]></expression-component>
                <foreach collection="#[payload.get(&quot;Resources&quot;).getElements()]" doc:name="For Each resource">
                    <choice doc:name="Choice">
                        <when expression="#[flowVars.is_vlaams != true]">
                            <set-variable variableName="potential_placename" value="#[payload.get(&quot;@surfaceForm&quot;).toString().replaceAll('&quot;', '')]" doc:name="Set potential_placename"/>
                            <set-variable variableName="lang" value="#['nl']" doc:name="set lang nl"/>
                            <flow-ref name="geonames" doc:name="geonames"/>
                            <logger level="INFO" doc:name="Logger"/>
                        </when>
                        <otherwise>
                            <expression-component doc:name="Expression"><![CDATA[// do nothing]]></expression-component>
                        </otherwise>
                    </choice>
                </foreach>
            </when>
            <otherwise>
                <set-payload value="#['text=&quot;' + flowVars.queryString + '&quot;&amp;confidence=0.0']" doc:name="Set Payload"/>
                <http:request config-ref="SpotlightFr" path="/fr/rest/annotate" method="POST" doc:name="Get dbpedia info with JSON accept header and text body">
                    <http:request-builder>
                        <http:header headerName="Accept" value="application/json"/>
                    </http:request-builder>
                </http:request>
                <byte-array-to-string-transformer mimeType="application/json" doc:name="Byte Array to String"/>
                <json:json-to-object-transformer doc:name="JSON to Object"/>
                <choice doc:name="Choice">
                    <when expression="#[payload.hasNode(&quot;Resources&quot;)]">
                        <logger level="INFO" doc:name="Logger"/>
                        <foreach collection="#[payload.get(&quot;Resources&quot;).getElements()]" doc:name="For Each resource">
                            <choice doc:name="Choice">
                                <when expression="#[flowVars.is_vlaams != true]">
                                    <set-variable variableName="potential_placename" value="#[payload.get(&quot;@surfaceForm&quot;).toString()]" doc:name="Set potential_placename"/>
                                    <set-variable variableName="lang" value="#['fr']" doc:name="set lang fr"/>
                                    <flow-ref name="geonames" doc:name="geonames"/>
                                </when>
                                <otherwise>
                                    <expression-component doc:name="Expression"><![CDATA[// do nothing]]></expression-component>
                                </otherwise>
                            </choice>
                        </foreach>
                    </when>
                    <otherwise>
                        <logger level="INFO" doc:name="Logger"/>
                        <set-payload value="#[flowVars.output]" doc:name="Set Payload"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	vlaams: flowVars.is_vlaams,
	entiteit: (flowVars.nope replace '"' with '') when flowVars.nope? otherwise (flowVars.potential_placename replace '"' with '' when flowVars.potential_placename? otherwise "")	
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <sub-flow name="geonames">
        <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
        <http:request config-ref="geonamesAPI" path="searchJSON" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="q" value="#[flowVars.potential_placename]"/>
                <http:query-param paramName="country" value="BE"/>
                <http:query-param paramName="username" value="stijnplanckaert"/>
                <http:query-param paramName="lang" value="#[flowVars.lang]"/>
            </http:request-builder>
        </http:request>
        <json:json-to-object-transformer doc:name="JSON to Object"/>
        <logger level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="payload.get(&quot;totalResultsCount&quot;).asInt() &gt; 0">
                <logger level="INFO" doc:name="Logger"/>
                <set-variable variableName="result" value="#[payload.get(&quot;geonames&quot;).get(0).get(&quot;adminName1&quot;).toString().replaceAll('&quot;', '')]" doc:name="Set result (adminName1)"/>
                <set-variable variableName="name" value="#[payload.get(&quot;geonames&quot;).get(0).get(&quot;name&quot;).toString().replaceAll('&quot;', '')]" doc:name="Set name"/>
                <logger level="INFO" doc:name="Logger"/>
                <set-variable variableName="is_vlaams" value="#[(flowVars.name.toLowerCase() == flowVars.potential_placename.toLowerCase()) &amp;&amp; (flowVars.result.contains('Vlaams') || flowVars.result.contains('Bru')) ? true : false]" doc:name="Set is_vlaams"/>
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="Nope" level="INFO" doc:name="Logger"/>
                <set-variable variableName="nope" value="#[flowVars.potential_placename]" doc:name="Set nope"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
